// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopWebData.DbContextData;

namespace ShopWebData.Migrations
{
    [DbContext(typeof(TeduDbContext))]
    [Migration("20230408122102_updateDOB")]
    partial class updateDOB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ShopWebData.Entities.AppConfig", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Keys")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("AppConfig");

                    b.HasData(
                        new
                        {
                            Key = 1,
                            Keys = "HomePage",
                            Value = "This is HomePage"
                        },
                        new
                        {
                            Key = 2,
                            Keys = "ContactPage",
                            Value = "This is ContactPage"
                        },
                        new
                        {
                            Key = 3,
                            Keys = "InfomationPage",
                            Value = "This is InfomationPage"
                        });
                });

            modelBuilder.Entity("ShopWebData.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3558cbdc-4e73-4e30-b2ef-c8d8dcb5d87f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "962bbb54-170e-4ec0-991d-7c53ad19a1c8",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abc0@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Nguyen Van 0",
                            LastLoginDate = new DateTime(2023, 4, 8, 19, 21, 0, 963, DateTimeKind.Local).AddTicks(7796),
                            LockoutEnabled = false,
                            PasswordHash = "011111",
                            PhoneNumber = "0123456780",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ten0"
                        },
                        new
                        {
                            Id = new Guid("b9b5c492-d9a5-4491-a115-e3fa40f805bd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ce7a240-aa3a-45cc-8459-1a6d66ecaa43",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abc1@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Nguyen Van 1",
                            LastLoginDate = new DateTime(2023, 4, 8, 19, 21, 0, 963, DateTimeKind.Local).AddTicks(8305),
                            LockoutEnabled = false,
                            PasswordHash = "111111",
                            PhoneNumber = "0123456781",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ten1"
                        },
                        new
                        {
                            Id = new Guid("14f326e1-931b-4e58-a732-e02f94d9726c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2cc07ff8-e5c6-4fe4-9504-bdab3220ef9d",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abc2@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Nguyen Van 2",
                            LastLoginDate = new DateTime(2023, 4, 8, 19, 21, 0, 963, DateTimeKind.Local).AddTicks(8347),
                            LockoutEnabled = false,
                            PasswordHash = "211111",
                            PhoneNumber = "0123456782",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ten2"
                        },
                        new
                        {
                            Id = new Guid("a82eeec0-ba3d-4d1f-b65c-35c83cdc6c54"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "982c6641-2b57-4627-9df1-06af2e0a6265",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abc3@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Nguyen Van 3",
                            LastLoginDate = new DateTime(2023, 4, 8, 19, 21, 0, 963, DateTimeKind.Local).AddTicks(8371),
                            LockoutEnabled = false,
                            PasswordHash = "311111",
                            PhoneNumber = "0123456783",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ten3"
                        },
                        new
                        {
                            Id = new Guid("2f3ffb72-6a19-40b5-b7f8-9808e95201ef"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92ca138f-0d3c-41c3-9220-af25658156c5",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abc4@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Nguyen Van 4",
                            LastLoginDate = new DateTime(2023, 4, 8, 19, 21, 0, 963, DateTimeKind.Local).AddTicks(8398),
                            LockoutEnabled = false,
                            PasswordHash = "411111",
                            PhoneNumber = "0123456784",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ten4"
                        },
                        new
                        {
                            Id = new Guid("73844bce-f335-477b-bee9-0397786c7062"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "519b295e-4be9-42e9-ae4e-a616dfa3cf23",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abc5@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Nguyen Van 5",
                            LastLoginDate = new DateTime(2023, 4, 8, 19, 21, 0, 963, DateTimeKind.Local).AddTicks(8473),
                            LockoutEnabled = false,
                            PasswordHash = "511111",
                            PhoneNumber = "0123456785",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ten5"
                        },
                        new
                        {
                            Id = new Guid("915e53c1-0ab1-4ab0-9c0e-3793c146c693"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4cc02965-fa2d-4026-b95a-56fc6d3f49a7",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abc6@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Nguyen Van 6",
                            LastLoginDate = new DateTime(2023, 4, 8, 19, 21, 0, 963, DateTimeKind.Local).AddTicks(8498),
                            LockoutEnabled = false,
                            PasswordHash = "611111",
                            PhoneNumber = "0123456786",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ten6"
                        },
                        new
                        {
                            Id = new Guid("e4639848-dc9d-4db1-a861-090cefdf66ff"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc4f1537-5b7b-4442-a8ee-3c0d1503b7a0",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abc7@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Nguyen Van 7",
                            LastLoginDate = new DateTime(2023, 4, 8, 19, 21, 0, 963, DateTimeKind.Local).AddTicks(8520),
                            LockoutEnabled = false,
                            PasswordHash = "711111",
                            PhoneNumber = "0123456787",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ten7"
                        },
                        new
                        {
                            Id = new Guid("745ac30e-5e6c-49b3-a37f-74e4c5420093"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66ec0be5-1d9c-4d01-944d-b342fd7346ff",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abc8@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Nguyen Van 8",
                            LastLoginDate = new DateTime(2023, 4, 8, 19, 21, 0, 963, DateTimeKind.Local).AddTicks(8545),
                            LockoutEnabled = false,
                            PasswordHash = "811111",
                            PhoneNumber = "0123456788",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ten8"
                        },
                        new
                        {
                            Id = new Guid("97b0a477-4650-4875-8c26-15ce2767efb6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ca28e98-6a75-4bf7-a9b6-4af9a9b5810f",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abc9@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Nguyen Van 9",
                            LastLoginDate = new DateTime(2023, 4, 8, 19, 21, 0, 963, DateTimeKind.Local).AddTicks(8568),
                            LockoutEnabled = false,
                            PasswordHash = "911111",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ten9"
                        });
                });

            modelBuilder.Entity("ShopWebData.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserID");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("ShopWebData.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Statuss")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("ShopWebData.Entities.CategoryTranslation", b =>
                {
                    b.Property<int>("LangueId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LangueId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslation");
                });

            modelBuilder.Entity("ShopWebData.Entities.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ContactId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ShopWebData.Entities.Funtion", b =>
                {
                    b.Property<Guid>("FunID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FunID");

                    b.ToTable("Funtion");
                });

            modelBuilder.Entity("ShopWebData.Entities.Language", b =>
                {
                    b.Property<int>("LangueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IsDefault")
                        .HasColumnType("int");

                    b.Property<string>("LangName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("LangueId");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("ShopWebData.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("GetUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId");

                    b.HasIndex("GetUserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ShopWebData.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("ShopWebData.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 1 cua SamSung",
                            OriginalPrice = 2001m,
                            Price = 1001m,
                            ProductName = "SanPham 01",
                            SeoAlias = "ABCD1",
                            Stock = 11,
                            ViewCount = 21
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 2 cua SamSung",
                            OriginalPrice = 2002m,
                            Price = 1002m,
                            ProductName = "SanPham 02",
                            SeoAlias = "ABCD2",
                            Stock = 12,
                            ViewCount = 22
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 3 cua SamSung",
                            OriginalPrice = 2003m,
                            Price = 1003m,
                            ProductName = "SanPham 03",
                            SeoAlias = "ABCD3",
                            Stock = 13,
                            ViewCount = 23
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 4 cua SamSung",
                            OriginalPrice = 2004m,
                            Price = 1004m,
                            ProductName = "SanPham 04",
                            SeoAlias = "ABCD4",
                            Stock = 14,
                            ViewCount = 24
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 5 cua SamSung",
                            OriginalPrice = 2005m,
                            Price = 1005m,
                            ProductName = "SanPham 05",
                            SeoAlias = "ABCD5",
                            Stock = 15,
                            ViewCount = 25
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 6 cua SamSung",
                            OriginalPrice = 2006m,
                            Price = 1006m,
                            ProductName = "SanPham 06",
                            SeoAlias = "ABCD6",
                            Stock = 16,
                            ViewCount = 26
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 7 cua SamSung",
                            OriginalPrice = 2007m,
                            Price = 1007m,
                            ProductName = "SanPham 07",
                            SeoAlias = "ABCD7",
                            Stock = 17,
                            ViewCount = 27
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 8 cua SamSung",
                            OriginalPrice = 2008m,
                            Price = 1008m,
                            ProductName = "SanPham 08",
                            SeoAlias = "ABCD8",
                            Stock = 18,
                            ViewCount = 28
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 9 cua SamSung",
                            OriginalPrice = 2009m,
                            Price = 1009m,
                            ProductName = "SanPham 09",
                            SeoAlias = "ABCD9",
                            Stock = 19,
                            ViewCount = 29
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 10 cua SamSung",
                            OriginalPrice = 2010m,
                            Price = 1010m,
                            ProductName = "SanPham 010",
                            SeoAlias = "ABCD10",
                            Stock = 20,
                            ViewCount = 30
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 11 cua SamSung",
                            OriginalPrice = 2011m,
                            Price = 1011m,
                            ProductName = "SanPham 011",
                            SeoAlias = "ABCD11",
                            Stock = 21,
                            ViewCount = 31
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 12 cua SamSung",
                            OriginalPrice = 2012m,
                            Price = 1012m,
                            ProductName = "SanPham 012",
                            SeoAlias = "ABCD12",
                            Stock = 22,
                            ViewCount = 32
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 13 cua SamSung",
                            OriginalPrice = 2013m,
                            Price = 1013m,
                            ProductName = "SanPham 013",
                            SeoAlias = "ABCD13",
                            Stock = 23,
                            ViewCount = 33
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 14 cua SamSung",
                            OriginalPrice = 2014m,
                            Price = 1014m,
                            ProductName = "SanPham 014",
                            SeoAlias = "ABCD14",
                            Stock = 24,
                            ViewCount = 34
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 15 cua SamSung",
                            OriginalPrice = 2015m,
                            Price = 1015m,
                            ProductName = "SanPham 015",
                            SeoAlias = "ABCD15",
                            Stock = 25,
                            ViewCount = 35
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 16 cua SamSung",
                            OriginalPrice = 2016m,
                            Price = 1016m,
                            ProductName = "SanPham 016",
                            SeoAlias = "ABCD16",
                            Stock = 26,
                            ViewCount = 36
                        },
                        new
                        {
                            Id = 17,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 17 cua SamSung",
                            OriginalPrice = 2017m,
                            Price = 1017m,
                            ProductName = "SanPham 017",
                            SeoAlias = "ABCD17",
                            Stock = 27,
                            ViewCount = 37
                        },
                        new
                        {
                            Id = 18,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 18 cua SamSung",
                            OriginalPrice = 2018m,
                            Price = 1018m,
                            ProductName = "SanPham 018",
                            SeoAlias = "ABCD18",
                            Stock = 28,
                            ViewCount = 38
                        },
                        new
                        {
                            Id = 19,
                            DateCreated = new DateTime(2023, 4, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "San pham thu 19 cua SamSung",
                            OriginalPrice = 2019m,
                            Price = 1019m,
                            ProductName = "SanPham 019",
                            SeoAlias = "ABCD19",
                            Stock = 29,
                            ViewCount = 39
                        });
                });

            modelBuilder.Entity("ShopWebData.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("ShopWebData.Entities.ProductInCaterogy", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("ShopWebData.Entities.ProductTranslation", b =>
                {
                    b.Property<int>("LangueId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LangueId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTranslation");
                });

            modelBuilder.Entity("ShopWebData.Entities.Promotion", b =>
                {
                    b.Property<int>("ProId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApplyForAll")
                        .HasColumnType("bit");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProId");

                    b.HasIndex("ProductId");

                    b.ToTable("Promotion");
                });

            modelBuilder.Entity("ShopWebData.Entities.RoleIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ShopWebData.Entities.SystemActivities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FuntionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FuntionId");

                    b.HasIndex("UsersId");

                    b.ToTable("SystemActivities");
                });

            modelBuilder.Entity("ShopWebData.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ShopWebData.Entities.RoleIdentity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ShopWebData.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ShopWebData.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ShopWebData.Entities.RoleIdentity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopWebData.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ShopWebData.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShopWebData.Entities.Cart", b =>
                {
                    b.HasOne("ShopWebData.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopWebData.Entities.AppUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopWebData.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("ShopWebData.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopWebData.Entities.Language", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LangueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ShopWebData.Entities.Order", b =>
                {
                    b.HasOne("ShopWebData.Entities.AppUser", "GetUser")
                        .WithMany("Orders")
                        .HasForeignKey("GetUserId");

                    b.Navigation("GetUser");
                });

            modelBuilder.Entity("ShopWebData.Entities.OrderDetail", b =>
                {
                    b.HasOne("ShopWebData.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopWebData.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopWebData.Entities.ProductImage", b =>
                {
                    b.HasOne("ShopWebData.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopWebData.Entities.ProductInCaterogy", b =>
                {
                    b.HasOne("ShopWebData.Entities.Category", "Categories")
                        .WithMany("ProductInCaterogies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopWebData.Entities.Product", "Product")
                        .WithMany("ProductInCaterogies")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopWebData.Entities.ProductTranslation", b =>
                {
                    b.HasOne("ShopWebData.Entities.Language", "Language")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("LangueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopWebData.Entities.Product", "Product")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopWebData.Entities.Promotion", b =>
                {
                    b.HasOne("ShopWebData.Entities.Product", "Product")
                        .WithMany("Promotions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopWebData.Entities.SystemActivities", b =>
                {
                    b.HasOne("ShopWebData.Entities.Funtion", "Funtion")
                        .WithMany("SystemActivities")
                        .HasForeignKey("FuntionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopWebData.Entities.AppUser", "Users")
                        .WithMany("SystemActivities")
                        .HasForeignKey("UsersId");

                    b.Navigation("Funtion");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ShopWebData.Entities.Transaction", b =>
                {
                    b.HasOne("ShopWebData.Entities.AppUser", "AppUser")
                        .WithMany("Transactions")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ShopWebData.Entities.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("SystemActivities");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ShopWebData.Entities.Category", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("ProductInCaterogies");
                });

            modelBuilder.Entity("ShopWebData.Entities.Funtion", b =>
                {
                    b.Navigation("SystemActivities");
                });

            modelBuilder.Entity("ShopWebData.Entities.Language", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("ProductTranslations");
                });

            modelBuilder.Entity("ShopWebData.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ShopWebData.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductInCaterogies");

                    b.Navigation("ProductTranslations");

                    b.Navigation("Promotions");
                });
#pragma warning restore 612, 618
        }
    }
}
